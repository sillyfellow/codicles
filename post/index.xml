<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Code Chronicles (mostly)</title>
    <link>https://codicles.org/post/</link>
    <description>Recent content in Posts on Code Chronicles (mostly)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Jan 2025 00:00:00 +0100</lastBuildDate><atom:link href="https://codicles.org/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Test entry</title>
      <link>https://codicles.org/post/test-entry/</link>
      <pubDate>Mon, 27 Jan 2025 00:00:00 +0100</pubDate>
      
      <guid>https://codicles.org/post/test-entry/</guid>
      
      <description>&lt;p&gt;Everything is a test&lt;/p&gt;
&lt;p&gt;&amp;ndash; sillyfellow @ &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2025-01-27 Mon 22:23]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Git pain optimisation</title>
      <link>https://codicles.org/post/git-pain-optimisation/</link>
      <pubDate>Wed, 26 Oct 2022 00:00:00 +0200</pubDate>
      
      <guid>https://codicles.org/post/git-pain-optimisation/</guid>
      
      <description>&lt;p&gt;I have been thinking a bit about git and the tools that help us with
it.&lt;/p&gt;
&lt;p&gt;Git is a super powerful tool, but with quite complicated ways of
working.&lt;/p&gt;
&lt;p&gt;And to most of the developers, the interface in the command line is
hard.&lt;/p&gt;
&lt;p&gt;That usually leads them to using some UI which claims to make things
easier by abstracting details away (that is, the UI claims to do
the magic).&lt;/p&gt;
&lt;p&gt;All what I have seen so far tells me that this results in quite
unexpected behaviour (well, funnily enough sometimes we don&amp;rsquo;t even
know what is the expected behaviour). And every time this unexpected
things come along, one has to spend a good amount of time to fix it
(and that is possible only with the CLI)&lt;/p&gt;
&lt;p&gt;To make it worse for me, in most of the projects I&amp;rsquo;m in, the person
who bears this pain is yours truly.&lt;/p&gt;
&lt;p&gt;This is mainly because the developers of the UI tool are probably
confused too, and finds it hard to communicate with the users
correctly - resulting in a tool which claims to do magic, but performs
the wrong trick.&lt;/p&gt;
&lt;p&gt;The one and only solution I have seen which works (not claiming it is
easy), and completely avoids all or any kind of surprise is the git
command line.&lt;/p&gt;
&lt;p&gt;I use perhaps 2% of the power of git, but only from CLI and
very very rarely do I end up in a soup.&lt;/p&gt;
&lt;p&gt;My regular pain is probably ever so little more than the pain of the
UI tool user. But that is my worst pain, but never do I have to suffer
anything worse.&lt;/p&gt;
&lt;p&gt;So, please go ahead and learn those 10 git cli commands and get out of
the habit of using a fancy tool which merges in the wrong direction or
rebases incorrectly to drive you mad. That&amp;rsquo;ll pay off and keep your
pain minimal.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>How do I blog?</title>
      <link>https://codicles.org/post/blogging-howto/</link>
      <pubDate>Sun, 02 Oct 2022 00:00:00 +0200</pubDate>
      
      <guid>https://codicles.org/post/blogging-howto/</guid>
      
      <description>&lt;p&gt;I blog directly from Emacs (Org mode), using hugo-markdown export, and easy hugo.&lt;/p&gt;
&lt;p&gt;Org mode capture allows me to directly write to my &lt;code&gt;entries.org&lt;/code&gt; file, which I then export the usual way (C-c C-e), but into the markdown file in the posts folder in my hugo website.&lt;/p&gt;
&lt;p&gt;And with easy-hugo, I just publish it. That&amp;rsquo;s it :)&lt;/p&gt;
&lt;p&gt;What I shall not forget is giving a proper name in the &lt;code&gt;entries.org&lt;/code&gt; so that all is kept in order.&lt;/p&gt;
&lt;p&gt;Of course, everything is in git/hub as well.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://codicles.org/post/helloworld/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0100</pubDate>
      
      <guid>https://codicles.org/post/helloworld/</guid>
      
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#080&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#080&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#00a000&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;Hello World!&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;ndash; sillyfellow @ &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2022-01-03 Mon 09:14]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Refresh token (access token)</title>
      <link>https://codicles.org/post/auth-session-tokens-refresh-etc/</link>
      <pubDate>Fri, 01 Dec 2023 16:24:03 +0100</pubDate>
      
      <guid>https://codicles.org/post/auth-session-tokens-refresh-etc/</guid>
      
      <description>&lt;ul&gt;
&lt;li&gt;Do not use JWT (Just DON&amp;rsquo;T)&lt;/li&gt;
&lt;li&gt;Always have a sessions table
&lt;ul&gt;
&lt;li&gt;Which belongs to the USER
&lt;ul&gt;
&lt;li&gt;i.e., sessions table has a user_id column&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Have access_token and refresh_token
&lt;ul&gt;
&lt;li&gt;ideally as varchar(256), not text&lt;/li&gt;
&lt;li&gt;do not allow them to grow&lt;/li&gt;
&lt;li&gt;security shall be mostly based on rotation, not purely on length&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Must have access_token_expires_at and refresh_token_expires at columns (both datetime, and keep them as UTC)
&lt;ul&gt;
&lt;li&gt;make sure to have these columns calculated during the creation of the session. Do not think of doing &amp;ldquo;time-math&amp;rdquo; for calculating expiry.
&lt;ul&gt;
&lt;li&gt;Because, you may login with one server, but the next server you have the auth checked might have a different time stamp/zone&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;access/refresh tokens shall be unique&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;From the above, it becomes possible to have multiple active sessions for one user.
&lt;ul&gt;
&lt;li&gt;If that is not desired, restrict that at code level, not at DB level&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generate random strings for access token and refresh token
&lt;ul&gt;
&lt;li&gt;keep them URLsafe (you&amp;rsquo;ll thank me when you have a mobile app)&lt;/li&gt;
&lt;li&gt;Keep them about 256 char long
&lt;ul&gt;
&lt;li&gt;no longer&lt;/li&gt;
&lt;li&gt;no shorter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make access_expiry in a few minutes, and refresh_expiry in a few days&lt;/li&gt;
&lt;li&gt;Standard auth is having authorisation header
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Authorisation: Bearer &amp;lt;access-token&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Refresh token will require
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Authorisation: Bearer &amp;lt;refresh-token&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deal with Auth always in a middleware and keep the logged in user, or the session found by looking up the access_token (or refresh_token) in the sessions table&lt;/li&gt;
&lt;li&gt;On refresh, delete the current session object, and create a new one with new
&lt;ul&gt;
&lt;li&gt;access_token, and new expiry in a few minutes&lt;/li&gt;
&lt;li&gt;refresh_token, with new expiry in a few days&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Disallow refresh if the refresh token is already expired&lt;/li&gt;
&lt;li&gt;So, if a user logs in and is inactive for a few days, the refresh token expires, and they will have to login fresh again&lt;/li&gt;
&lt;li&gt;But as long as the user does a &amp;ldquo;refresh&amp;rdquo; before the refresh-token is expired, they will have sessions alive always.&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://codicles.org/post/kb/</link>
      <pubDate>Fri, 01 Dec 2023 16:21:49 +0100</pubDate>
      
      <guid>https://codicles.org/post/kb/</guid>
      
      <description>&lt;h2 id=&#34;2023&#34;&gt;2023&lt;/h2&gt;
&lt;h3 id=&#34;2023-08-august&#34;&gt;2023-08 August&lt;/h3&gt;
&lt;h4 id=&#34;2023-08-21-monday&#34;&gt;2023-08-21 Monday&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PlantUML and GraphViz (DOT)&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PlantUML&lt;/p&gt;
&lt;p&gt;It is a tool (Java library/package) that helps one to create UML diagrams with ease.&lt;/p&gt;
&lt;p&gt;For the full details of it, one should look at &lt;a href=&#34;https://plantuml.com/&#34;&gt;https://plantuml.com/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The basic idea is that you write the diagram you need in plain text, and then using java + plantuml.jar (downloaded from the website above), generate a nice diagram.&lt;/p&gt;
&lt;p&gt;Your steps&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Setup java on your machine&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download PlantUML.jar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create your text file for the diagram (see example here)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@startuml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;title Your title
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;center footer Your footer
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;skinparam classFontName Georgia
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;skinparam roundcorner 20
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;skinparam defaultFontName Georgia
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;skinparam dpi 160
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;participant &amp;#34;Participant Fellow&amp;#34; as participant
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;actor       Actor       as actor
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;boundary    Boundary    as boundary
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;control     Control     as control
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;entity      Entity      as entity
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;database    Database    as db
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;collections Collections as colls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;queue       Queue       as q
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;participant  -&amp;gt; actor : To actor
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;participant  -&amp;gt; boundary : To boundary
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;participant  -&amp;gt; control : To control
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;participant  -&amp;gt; entity : To entity
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;participant  -&amp;gt; db : To database
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;participant  -&amp;gt; colls : To collections
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;participant  -&amp;gt; q: To queue
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;boundary -&amp;gt; actor : To actor
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;control -&amp;gt; boundary : To boundary
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db -&amp;gt; control : To control
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;actor -&amp;gt; entity : To entity
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;entity -&amp;gt; db : To database
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;q -&amp;gt; colls : To collections
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;colls -&amp;gt; q: To queue
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@enduml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compile&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;export JAVA_HOME=$(/usr/libexec/java_home) # set the JAVA_HOME variable
java -jar path/to/plantuml.jar -verbose &amp;lt;inputfile&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You will have the output as png in the folder.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://codicles.org/ox-hugo/sample-plantuml-output.png&#34;&gt;
            &lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DOT / Grapviz&lt;/p&gt;
&lt;p&gt;For this, you need to install graphviz on your system and should have the command &lt;code&gt;dot&lt;/code&gt; available.&lt;/p&gt;
&lt;p&gt;Installation is straight forward in *nix machines. See &lt;a href=&#34;https://graphviz.org/&#34;&gt;https://graphviz.org/&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install Graphviz, have Dot&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create input file (example)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;digraph name  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Sample -&amp;gt; Diagram -&amp;gt; Workflow;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Test -&amp;gt; Diagram;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Sample -&amp;gt; Workflow
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run command &lt;code&gt;dot -Tpng input.file &amp;gt; output.png&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You have the output ready.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://codicles.org/ox-hugo/pf-workflow.png&#34;&gt;
            &lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2023-09-september&#34;&gt;2023-09 September&lt;/h3&gt;
&lt;h4 id=&#34;2023-09-04-monday&#34;&gt;2023-09-04 Monday&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Marshaling magic in Golang&lt;/p&gt;
&lt;p&gt;If you want to customise the json representation of a field in a golang struct, you can just add some custome JSON tag&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;type&lt;/span&gt; OneStruct &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     PublicField &lt;span style=&#34;color:#b44&#34;&gt;`json&amp;#34;public_field&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     AnotherField &lt;span style=&#34;color:#b44&#34;&gt;`json:&amp;#34;camelCasedInJSON&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This won&amp;rsquo;t help you expose private fields. If you want to expose them, you need to override the &lt;code&gt;MarshalJSON&lt;/code&gt; method of the struct.
See the example below&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;package&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;encoding/json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;type&lt;/span&gt; MyStruct &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        UpperCase &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        lowerCase &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;// NOTE: This field is not exported, and will not be in the json
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;&lt;/span&gt;        secret    &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;// createStruct creates a struct with an exported and an unexported field.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;createStruct&lt;/span&gt;() &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;MyStruct {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;MyStruct{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                UpperCase: &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;UPPER&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                lowerCase: &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;lower&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;// we implement the Marshaler interface for our struct.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;// This means that when we call json.Marshal on our struct, this
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;// method will be called.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;func&lt;/span&gt; (s &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;MyStruct) &lt;span style=&#34;color:#00a000&#34;&gt;MarshalJSON&lt;/span&gt;() ([]&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;// we create a new &amp;#34;marshalable&amp;#34; struct with the fields we want to
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;// export. We do not need to create a new type for this, we can
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;// just use a struct literal.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        marshalable &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                UpperCase &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#b44&#34;&gt;`json:&amp;#34;upperCase&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                LowerCase &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#b44&#34;&gt;`json:&amp;#34;lower_case&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;// NOTE: The order of the keys is not guaranteed.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;&lt;/span&gt;                UpperCase: s.UpperCase,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                LowerCase: s.lowerCase,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; json.&lt;span style=&#34;color:#00a000&#34;&gt;Marshal&lt;/span&gt;(marshalable)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ourStruct &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;createStruct&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        json, err &lt;span style=&#34;color:#666&#34;&gt;:=&lt;/span&gt; json.&lt;span style=&#34;color:#00a000&#34;&gt;Marshal&lt;/span&gt;(ourStruct)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                fmt.&lt;span style=&#34;color:#00a000&#34;&gt;Println&lt;/span&gt;(err.&lt;span style=&#34;color:#00a000&#34;&gt;Error&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fmt.&lt;span style=&#34;color:#00a000&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a2f&#34;&gt;string&lt;/span&gt;(json))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;ndash; sillyfellow @ &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2023-09-04 Mon 11:17]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2023-12-december&#34;&gt;2023-12 December&lt;/h3&gt;
&lt;h4 id=&#34;2023-12-01-friday&#34;&gt;2023-12-01 Friday&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Refresh token (access token)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do not use JWT (Just DON&amp;rsquo;T)&lt;/li&gt;
&lt;li&gt;Always have a sessions table
&lt;ul&gt;
&lt;li&gt;Which belongs to the USER
&lt;ul&gt;
&lt;li&gt;i.e., sessions table has a user_id column&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Have access_token and refresh_token
&lt;ul&gt;
&lt;li&gt;ideally as varchar(256), not text&lt;/li&gt;
&lt;li&gt;do not allow them to grow&lt;/li&gt;
&lt;li&gt;security shall be mostly based on rotation, not purely on length&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Must have access_token_expires_at and refresh_token_expires at columns (both datetime, and keep them as UTC)
&lt;ul&gt;
&lt;li&gt;make sure to have these columns calculated during the creation of the session. Do not think of doing &amp;ldquo;time-math&amp;rdquo; for calculating expiry.
&lt;ul&gt;
&lt;li&gt;Because, you may login with one server, but the next server you have the auth checked might have a different time stamp/zone&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;access/refresh tokens shall be unique&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;From the above, it becomes possible to have multiple active sessions for one user.
&lt;ul&gt;
&lt;li&gt;If that is not desired, restrict that at code level, not at DB level&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generate random strings for access token and refresh token
&lt;ul&gt;
&lt;li&gt;keep them URLsafe (you&amp;rsquo;ll thank me when you have a mobile app)&lt;/li&gt;
&lt;li&gt;Keep them about 256 char long
&lt;ul&gt;
&lt;li&gt;no longer&lt;/li&gt;
&lt;li&gt;no shorter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make access_expiry in a few minutes, and refresh_expiry in a few days&lt;/li&gt;
&lt;li&gt;Standard auth is having authorisation header
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Authorisation: Bearer &amp;lt;access-token&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Refresh token will require
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Authorisation: Bearer &amp;lt;refresh-token&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deal with Auth always in a middleware and keep the logged in user, or the session found by looking up the access_token (or refresh_token) in the sessions table&lt;/li&gt;
&lt;li&gt;On refresh, delete the current session object, and create a new one with new
&lt;ul&gt;
&lt;li&gt;access_token, and new expiry in a few minutes&lt;/li&gt;
&lt;li&gt;refresh_token, with new expiry in a few days&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Disallow refresh if the refresh token is already expired&lt;/li&gt;
&lt;li&gt;So, if a user logs in and is inactive for a few days, the refresh token expires, and they will have to login fresh again&lt;/li&gt;
&lt;li&gt;But as long as the user does a &amp;ldquo;refresh&amp;rdquo; before the refresh-token is expired, they will have sessions alive always.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
  </channel>
</rss>
