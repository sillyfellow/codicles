<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code Chronicles (mostly)</title>
    <link>https://codicles.org/</link>
    <description>Recent content on Code Chronicles (mostly)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>sillyfellow@whybenormal.org (Dr. Sandeep Sadanandan)</managingEditor>
    <webMaster>sillyfellow@whybenormal.org (Dr. Sandeep Sadanandan)</webMaster>
    <lastBuildDate>Sun, 06 Aug 2023 00:00:00 +0200</lastBuildDate><atom:link href="https://codicles.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Server requirements</title>
      <link>https://codicles.org/post/server-requirements/</link>
      <pubDate>Sun, 06 Aug 2023 00:00:00 +0200</pubDate>
      <author>sillyfellow@whybenormal.org (Dr. Sandeep Sadanandan)</author>
      <guid>https://codicles.org/post/server-requirements/</guid>
      
      <description>&lt;p&gt;Every now and then I have to create a new server. Sometimes in Python, sometimes in Javascript (lately more Typescript), sometimes it is Go. Rarely Rails (at least lately). Over time, the following are my self-inflicted requirements for a nice server. Just putting it out here for future reference. Also, I might just create a series about creating such a server (perhaps in Golang?)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Database connection/s
&lt;ul&gt;
&lt;li&gt;of course at least one type should be configured.&lt;/li&gt;
&lt;li&gt;but possibly with choice of environments - develop on psql, testing on sqlite (for example)
&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;ve found it quite nice to have local tests that can be run on against an in-memory sqlite DB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Migration (either automatic on start, or with a simple trigger)
&lt;ul&gt;
&lt;li&gt;CRUD for entities, and similar things&lt;/li&gt;
&lt;li&gt;NOTE that this might get tricky with ability to run against different DBs.
&lt;ul&gt;
&lt;li&gt;In conflict, I think we stick with the DB of our choice and migrations win&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;/health endpoint
&lt;ul&gt;
&lt;li&gt;Should return something like &lt;code&gt;{ status: &amp;quot;Ok&amp;quot;, db_ping: &amp;quot;43ns&amp;quot;, version: &amp;quot;x.yy.zzz&amp;quot; }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The DB ping is quite useful at times (if you ping takes longer, you can directly see there&amp;rsquo;s a bit of load there)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NO global variables (must I explain?)&lt;/li&gt;
&lt;li&gt;NOTHING hardcoded
&lt;ul&gt;
&lt;li&gt;Env variables are to be read only in the main (entry method)&lt;/li&gt;
&lt;li&gt;And proper dependency injection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Swagger &lt;strong&gt;generated with annotations&lt;/strong&gt;, not with a large yaml/json file
&lt;ul&gt;
&lt;li&gt;Would love if it is a smart/er system which generates from code itself ;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;One method &lt;em&gt;createServer(params)&lt;/em&gt; should return
&lt;ul&gt;
&lt;li&gt;a server we can run, and&lt;/li&gt;
&lt;li&gt;a shutDownServer which will gracefully shut things down
&lt;ul&gt;
&lt;li&gt;(optional) proper disconnection from DB as well&lt;/li&gt;
&lt;li&gt;And to be called when we receive signals to die/kill&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Middle/After-ware which logs
&lt;ul&gt;
&lt;li&gt;Request arrival
&lt;ul&gt;
&lt;li&gt;possibility to turn on body/header logging&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Request completion with time taken
&lt;ul&gt;
&lt;li&gt;possibility to turn on output logging&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The possibility to add an arbitrary middleware
&lt;ul&gt;
&lt;li&gt;For example, something to add a dummy-header to the request.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unit tests
&lt;ul&gt;
&lt;li&gt;Anything which is NOT an api call should be testable with unit tests
&lt;ul&gt;
&lt;li&gt;(optional) If possible the migration method should be tested too&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Integration/API tests
&lt;ul&gt;
&lt;li&gt;All apis should be testable (/health included)
&lt;ul&gt;
&lt;li&gt;Test the response code, and verify with another call, but not by looking into DB.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create database at start&lt;/li&gt;
&lt;li&gt;Connect to database (in memory is fine too)&lt;/li&gt;
&lt;li&gt;NO tests shall call endpoints directly with path.
&lt;ul&gt;
&lt;li&gt;They shall be called as methods of server, or server like object.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;On test completion, shutdown the server, disconnect the database
&lt;ul&gt;
&lt;li&gt;a nice teardown (though our db might be in memory or temporary file)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Internationalisation / Localisation
&lt;ul&gt;
&lt;li&gt;The request shall be able to send `Accepted-Language` header, and the response must respect it.&lt;/li&gt;
&lt;li&gt;Should have some kind of localised strings file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Project shall be
&lt;ul&gt;
&lt;li&gt;structured to
&lt;ul&gt;
&lt;li&gt;entry-point.&amp;lt;java|ts|go|js|py&amp;gt;, (say main)&lt;/li&gt;
&lt;li&gt;and folders like routes/, models/, controllers/, repository/ (business logic), and /services&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;with rather limited package dependency&lt;/li&gt;
&lt;li&gt;compile/runnable and testable with simple commands, small script, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Basic auth endpoints, sessions, tokens, etc. without JWT (I personally dislike JWT)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;ndash; sillyfellow on 2023-08-06 (Sun 22:47)&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Git pain optimisation</title>
      <link>https://codicles.org/post/git-pain-optimisation/</link>
      <pubDate>Wed, 26 Oct 2022 00:00:00 +0200</pubDate>
      <author>sillyfellow@whybenormal.org (Dr. Sandeep Sadanandan)</author>
      <guid>https://codicles.org/post/git-pain-optimisation/</guid>
      
      <description>&lt;p&gt;I have been thinking a bit about git and the tools that help us with
it.&lt;/p&gt;
&lt;p&gt;Git is a super powerful tool, but with quite complicated ways of
working.&lt;/p&gt;
&lt;p&gt;And to most of the developers, the interface in the command line is
hard.&lt;/p&gt;
&lt;p&gt;That usually leads them to using some UI which claims to make things
easier by abstracting details away (that is, the UI claims to do
the magic).&lt;/p&gt;
&lt;p&gt;All what I have seen so far tells me that this results in quite
unexpected behaviour (well, funnily enough sometimes we don&amp;rsquo;t even
know what is the expected behaviour). And every time this unexpected
things come along, one has to spend a good amount of time to fix it
(and that is possible only with the CLI)&lt;/p&gt;
&lt;p&gt;To make it worse for me, in most of the projects I&amp;rsquo;m in, the person
who bears this pain is yours truly.&lt;/p&gt;
&lt;p&gt;This is mainly because the developers of the UI tool are probably
confused too, and finds it hard to communicate with the users
correctly - resulting in a tool which claims to do magic, but performs
the wrong trick.&lt;/p&gt;
&lt;p&gt;The one and only solution I have seen which works (not claiming it is
easy), and completely avoids all or any kind of surprise is the git
command line.&lt;/p&gt;
&lt;p&gt;I use perhaps 2% of the power of git, but only from CLI and
very very rarely do I end up in a soup.&lt;/p&gt;
&lt;p&gt;My regular pain is probably ever so little more than the pain of the
UI tool user. But that is my worst pain, but never do I have to suffer
anything worse.&lt;/p&gt;
&lt;p&gt;So, please go ahead and learn those 10 git cli commands and get out of
the habit of using a fancy tool which merges in the wrong direction or
rebases incorrectly to drive you mad. That&amp;rsquo;ll pay off and keep your
pain minimal.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>How do I blog?</title>
      <link>https://codicles.org/post/blogging-howto/</link>
      <pubDate>Sun, 02 Oct 2022 00:00:00 +0200</pubDate>
      <author>sillyfellow@whybenormal.org (Dr. Sandeep Sadanandan)</author>
      <guid>https://codicles.org/post/blogging-howto/</guid>
      
      <description>&lt;p&gt;I blog directly from Emacs (Org mode), using hugo-markdown export, and easy hugo.&lt;/p&gt;
&lt;p&gt;Org mode capture allows me to directly write to my &lt;code&gt;entries.org&lt;/code&gt; file, which I then export the usual way (C-c C-e), but into the markdown file in the posts folder in my hugo website.&lt;/p&gt;
&lt;p&gt;And with easy-hugo, I just publish it. That&amp;rsquo;s it :)&lt;/p&gt;
&lt;p&gt;What I shall not forget is giving a proper name in the &lt;code&gt;entries.org&lt;/code&gt; so that all is kept in order.&lt;/p&gt;
&lt;p&gt;Of course, everything is in git/hub as well.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://codicles.org/post/helloworld/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0100</pubDate>
      <author>sillyfellow@whybenormal.org (Dr. Sandeep Sadanandan)</author>
      <guid>https://codicles.org/post/helloworld/</guid>
      
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#080&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#080&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#00a000&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;Hello World!&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;ndash; sillyfellow @ &lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;[2022-01-03 Mon 09:14]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>https://codicles.org/about/</link>
      <pubDate>Sun, 26 Dec 2021 00:00:00 +0000</pubDate>
      <author>sillyfellow@whybenormal.org (Dr. Sandeep Sadanandan)</author>
      <guid>https://codicles.org/about/</guid>
      
      <description>&lt;h1 id=&#34;a-programmer-a-polyglot-a-carpenter&#34;&gt;A programmer, a polyglot, a carpenter&lt;/h1&gt;
&lt;p&gt;Making a living by coding about 40 hours a week. Mostly in Python,
Golang, Javascript, Bash, Ruby (on Rails), etc. Running a small
software agency in Frankfurt.&lt;/p&gt;
&lt;p&gt;Running the agency is sometimes very exciting, and sometimes very
taxing. I believe, that is what I might write more here in this space.&lt;/p&gt;
&lt;p&gt;On a daily basis, communicating in English, Malayalam, Tamil, and
German. When necessary a bit of Hindi as well. Very keen on adding
more to the list.&lt;/p&gt;
&lt;p&gt;And finally, the new popular hobby for everyone and their dogs -&amp;gt;
Carpentry. Have been dabbling a bit here and there since 2012. Some of
our household furniture are built by me.&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
